#include "cache.h"
#include "GHB_stride.h"

void CACHE::l2c_prefetcher_initialize()
{
    cout << "CPU " << cpu << " GHB-stride prefetcher" << endl;
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    ghb_init(addr, ip);
    uint64_t s;
    if(find3miss() && (s = check_stride())) {
        for(int i = look_head; i <= look_head + degree; i ++) {
            uint64_t new_addr = (GHB[cur_idx].addr + i * s) << LOG2_BLOCK_SIZE;
            prefetch_line(ip, addr, new_addr, FILL_L2, 0);
        }
    }

    cur_idx = (cur_idx + 1) % GHB_SIZE;
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " GHB-stride prefetcher final stats" << endl;
}